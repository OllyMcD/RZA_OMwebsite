@using MudBlazor
@using RZA_OMwebsite.Utilities
@using RZA_OMwebsite.Services
@using RZA_OMwebsite.Models
@inject UserSession UserSession
@inject AuthService AuthService
@inject RoomService RoomService
@inject RoombookingService RoombookingService
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject TrackingService TrackingService
@inject IHttpContextAccessor HttpContextAccessor


@rendermode InteractiveServer

@page "/booking"

<MudContainer>
    @if (isLoading)
    {
        <MudSkeleton Height="200px" Width="100%" Variant="Variant.Rectangular" Animation="Animation.Wave" />
        <MudSkeleton Height="200px" Width="80%" Variant="Variant.Text" Animation="Animation.Wave" />
        <MudSkeleton Height="200px" Width="60%" Variant="Variant.Text" Animation="Animation.Wave" />
        <MudSkeleton Height="200px" Width="40%" Variant="Variant.Text" Animation="Animation.Wave" />
        
    }
    else
    {
<br />
<div style="background-color: #1a3d0b; padding: 20px;"> <!-- Wrapper div with dark green background -->
    <MudPaper Elevation="3" Class="p-4" Style="background-color: #286506">
        <MudText Style="color: #fff;" Typo="Typo.h4" Align="Align.Center" GutterBottom>
            Booking
        </MudText>

        <MudButton OnClick="ShowUserId" Variant="Variant.Filled" Color="Color.Primary">
            Show User ID
        </MudButton>

        @if (customer != null)
        {
            <MudList T="string">
                <MudListItem>
                    <MudText Style="color: #fff;" Align="Align.Center">@customer.FirstName @customer.LastName</MudText>
                </MudListItem>
            </MudList>
        }
        else
        {
            <MudText Typo="Typo.body1" Color="Color.Error">
                Could not load customer information. Please log in again.
            </MudText>
        }

        @if (rooms != null)
        {
            <MudList T="int" Dense="true">
                @foreach (var room in rooms)
                {
                    <MudListItem>
                        Room @room.RoomNumber: @room.RoomType for @room.Capacity people
                    </MudListItem>
                }
            </MudList>
        }
        else
        {
            <MudText Typo="Typo.body1" Color="Color.Warning">
                Rooms are currently unavailable. Please try again later.
            </MudText>
        }
    </MudPaper>

    <br />

    <MudPaper Elevation="2" Class="p-4 mt-4">
        <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom>
            Book a Room
        </MudText>

        <MudForm>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="Roomnumber" Label="Select Room" Variant="Variant.Filled">
                        @if (rooms != null){
                            @foreach (var room in rooms)
                            {
                                <MudSelectItem Value="@room.RoomNumber">@room.RoomType</MudSelectItem>
                            }
                        }
                        else{
                            <div> NOT LOADED YET</div>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField Label="Start Date" @bind-Value="startDateString" InputType="InputType.Date" 
                    Variant="Variant.Filled" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="Days" Label="Number of Days" Variant="Variant.Filled">
                        @for (int i = 1; i <= 7; i++)
                        {
                            var days = i;
                            <MudSelectItem Value=@days>@days</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudButton OnClick="BookRoom" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-4">
                Book this Room
            </MudButton>
        </MudForm>
    </MudPaper>

    <MudText Typo="Typo.body2" Class="mt-4">
        <MudLink Href="/bookings/mybookings" Target="_blank">My Bookings</MudLink>
    </MudText>
</div>
}
</MudContainer>

@code {
    private Customer? customer;
    private List<Room>? rooms;

    private DateOnly startDate;
    private DateTime startDateTime;
    string? startDateString;
    private Room? Room;
    private int Roomnumber;
    private int Days;
    private bool isLoading = true;

    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {

        await Task.Delay(2000); // Simulate loading
        isLoading = false;

        await TrackingService.LogActionAsync("Visited Booking Page", HttpContextAccessor.HttpContext);

        rooms = await RoomService.GetRoomsAsync();
        isLoggedIn = CheckLoginStatus();

        if (!isLoggedIn)
        {
            NavigationManager.NavigateTo("/");
        }

        try
        {
            customer = await UserService.GetCustomerByUsernameAsync(AuthService.CurrentUsername);

            if (customer == null)
            {
                Console.WriteLine("No customer found with the provided ID.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customer: {ex.Message}");
        }
    }

    private bool CheckLoginStatus()
    {
        return AuthService.isLoggedIn;
    }

    private async Task ShowUserId()
    {
        await Task.Delay(500);
        Console.WriteLine($"User ID: {UserSession.customerId}");
    }

    private async Task BookRoom()
    {
        if (Roomnumber <= 0)
        {
            Console.WriteLine("Please select a valid room.");
            return;
        }

        try
        {
            Room = await RoomService.GetRoomAsync(Roomnumber);
            if (Room == null)
            {
                Console.WriteLine("Room not found.");
                return;
            }
            startDate = DateOnly.Parse(startDateString);
            await RoombookingService.AddRoombookingAsync(customer, Room, startDate, Days);
            Console.WriteLine($"Room {Room.RoomNumber} booked successfully for {Days} days starting {startDate}.");
            NavigationManager.NavigateTo("/booking/tickets");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error booking room: {ex.Message}");
        }
    }
}
