@page "/login"
@using RZA_OMwebsite.Services
@using RZA_OMwebsite.Utilities
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject CustomerService CustomerService

<br />
<br />

<MudPaper Class="pa-4 mx-auto" MaxWidth="400px" Elevation="2">
    <MudText Typo="Typo.h4" Align="Align.Center">Login</MudText>

    <MudForm>
        <MudTextField Label="Username" @bind-Value="username" Required="true" Class="mb-3" />
        <MudTextField Label="Password" @bind-Value="password" InputType="InputType.Password" Required="true" Class="mb-3" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoginUser" Class="mt-3" FullWidth="true">Login</MudButton>
    </MudForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <MudAlert Severity="alertSeverity" Variant="Variant.Outlined" Square="true" Class="my-2">@message</MudAlert>
    }
</MudPaper>

@code {
    private string? username;
    private string? password;
    private string message = string.Empty;
    private Severity alertSeverity;

    private async Task LoginUser()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            message = "Username and password are required.";
            alertSeverity = Severity.Warning;
            return;
        }

        var hashedPassword = PasswordUtils.HashPassword(password);

        // Attempt to log in and retrieve the customer object if successful
        var customer = await CustomerService.ValidateLoginAsync(username, hashedPassword);

        if (customer != null)
        {
            // Set the user as logged in with AuthService and store the customer ID in UserSession
            AuthService.Login(username); // Set login state and username

            message = "Login successful!";
            alertSeverity = Severity.Success;
            Navigation.NavigateTo("/main"); // Redirect to main page
        }
        else
        {
            message = "Invalid username or password.";
            alertSeverity = Severity.Error;
        }
    }
}
