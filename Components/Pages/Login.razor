@page "/login"
@using RZA_OMwebsite.Services
@using RZA_OMwebsite.Utilities
@using RZA_OMwebsite.Pages
@using RZA_OMwebsite.Models
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject CustomerService CustomerService
@inject PageService PageService
@inject UserSession UserSession

<br />
<br />

<MudPaper Class="pa-4 mx-auto" MaxWidth="400px" Elevation="2" Style="background-color: #286506;">
    <MudText Style="color: #fff;" Typo="Typo.h4" Align="Align.Center">Login</MudText>

    <MudForm>
        <MudTextField Style="color: #fff;" Label="Username" @bind-Value="username" Required="true" Class="mb-3" @onkeydown="HandleKeyDown" />
        <MudTextField Style="color: #fff;" Label="Password" @bind-Value="password" InputType="InputType.Password" Required="true" Class="mb-3" @onkeydown="HandleKeyDown" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoginUser" Class="mt-3" FullWidth="true">Login</MudButton>
    </MudForm>

    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <MudAlert Severity="alertSeverity" Variant="Variant.Outlined" Square="true" Class="my-2">@message</MudAlert>
    }
</MudPaper>

@code {
    private string? username;
    private string? password;
    private string? specialCodeEntered = string.Empty;
    private string message = string.Empty;
    private Severity alertSeverity;
    private bool isLoading = false;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoginUser();
        }
        else
        {
            if (specialCodeEntered.Length < 4)
            {
                specialCodeEntered += e.Key;
            }

            if (specialCodeEntered == "1234")
            {
                message = "Special code entered! Redirecting to special page.";
                alertSeverity = Severity.Success;
                NavigationManager.NavigateTo("/c1c224b03cd9bc7b6a86d77f5dace40191766c485cd55dc48caf9ac873335d6f");
            }
        }
    }

    private async Task LoginUser()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            message = "Username and password are required.";
            alertSeverity = Severity.Warning;
            return;
        }

        isLoading = true;
        NavigationManager.NavigateTo("/loading"); // Redirect to the loading page

        // Simulate delay while checking login (handled on loading page)
        await Task.Delay(1000); // Delay to simulate processing

        var hashedPassword = PasswordUtils.HashPassword(password);
        bool customer = await CustomerService.ValidateLoginAsync(username, hashedPassword);

        isLoading = false;

        if (customer != false)
        {
            AuthService.Login(username);
            message = "Login successful!";
            alertSeverity = Severity.Success;
            Customer thisCustomer = await CustomerService.GetCustomerByUsernameAsync(username);
            UserSession.customerId = thisCustomer.CustomerId;
            NavigationManager.NavigateTo("/main");
        }
        else
        {
            message = "Invalid username or password.";
            alertSeverity = Severity.Error;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await PageService.TrackPageViewAsync("/login");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Failed to track page view: {ex.Message}");
            }
        }
    }
}
