@page "/changePassword"
@using RZA_OMwebsite.Utilities
@using RZA_OMwebsite.Services
@using RZA_OMwebsite.Pages
@inject UserSession UserSession
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject PageService PageService
@inject ISnackbar Snackbar

@rendermode InteractiveServer

<style>
    .change-password-page {
        background-color: #7ab820; /* Background color as requested */
        height: 100vh; /* Full viewport height */
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

<div class="change-password-page">
    <MudPaper Class="pa-4" MaxWidth="400px" Elevation="4">
        <MudText Typo="Typo.h4" Align="Align.Center">Change Password</MudText>

        <MudTextField Label="Old Password"
                      Type="password"
                      @bind-Value="oldPassword"
                      Required="true"
                      Adornment="Adornment.Start"
                      Icon="@Icons.Material.Filled.Lock" />
        <br />
        <MudTextField Label="Confirm Old Password"
                      Type="password"
                      @bind-Value="oldPasswordConfirm"
                      Required="true"
                      Adornment="Adornment.Start"
                      Icon="@Icons.Material.Filled.Lock" />
        <br />
        <MudTextField Label="New Password"
                      Type="password"
                      @bind-Value="newPassword"
                      Required="true"
                      Adornment="Adornment.Start"
                      Icon="@Icons.Material.Filled.Lock"
                      OnInput="@( (ChangeEventArgs _) => CheckPasswordStrength() )" />

        <br />

        <!-- Password Strength Checklist -->
        <MudList T="string">
            <MudListItem>
                @(passwordLengthMet ? "✔️" : "❌") At least 8 characters
            </MudListItem>
            <MudListItem>
                @(hasUpperCase ? "✔️" : "❌") At least one uppercase letter
            </MudListItem>
            <MudListItem>
                @(hasLowerCase ? "✔️" : "❌") At least one lowercase letter
            </MudListItem>
            <MudListItem>
                @(hasNumber ? "✔️" : "❌") At least one number
            </MudListItem>
            <MudListItem>
                @(hasSpecialChar ? "✔️" : "❌") At least one special character
            </MudListItem>
        </MudList>

        <MudButton OnClick="@ChangePassword" Color="Color.Primary" Variant="Variant.Filled">
            Change Password
        </MudButton>
    </MudPaper>
</div>

@code {
    private string? newPassword;
    private string? oldPassword;
    private string? oldPasswordConfirm;

    // Validation flags
    private bool passwordLengthMet = false;
    private bool hasUpperCase = false;
    private bool hasLowerCase = false;
    private bool hasNumber = false;
    private bool hasSpecialChar = false;

    private bool firstRender = true;

    private async Task ChangePassword()
    {
        if (oldPassword == oldPasswordConfirm)
        {
            string hashedNewPassword = PasswordUtils.HashPassword(newPassword);
            string hashedOldPassword = PasswordUtils.HashPassword(oldPassword);
            await UserService.ChangePassword(UserSession.customerId, hashedOldPassword, hashedNewPassword);
            Snackbar.Add("Password changed successfully!", Severity.Success);
            NavigationManager.NavigateTo("/account-status");
        }
        else
        {
            Snackbar.Add("Old passwords do not match. Please try again.", Severity.Error);
        }
    }

    private void CheckPasswordStrength()
    {
        if (!string.IsNullOrEmpty(newPassword))
        {
            passwordLengthMet = newPassword.Length >= 8;
            hasUpperCase = newPassword.Any(char.IsUpper);
            hasLowerCase = newPassword.Any(char.IsLower);
            hasNumber = newPassword.Any(char.IsDigit);
            hasSpecialChar = newPassword.Any(ch => !char.IsLetterOrDigit(ch));
        }
        else
        {
            passwordLengthMet = hasUpperCase = hasLowerCase = hasNumber = hasSpecialChar = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var currentPageUrl = NavigationManager.Uri.Substring(22);
            await PageService.TrackPageViewAsync(currentPageUrl);
            this.firstRender = false;
        }
    }
}
