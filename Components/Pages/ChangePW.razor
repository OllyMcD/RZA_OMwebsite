@page "/changePassword"
@using RZA_OMwebsite.Utilities
@using RZA_OMwebsite.Services
@using RZA_OMwebsite.Pages
@inject UserSession UserSession
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager
@inject PageService PageService
@inject ISnackbar Snackbar

@rendermode InteractiveServer

<MudPaper Class="pa-4 mx-auto" MaxWidth="400px" Elevation="4">
    <h3>Change Password</h3>

    <MudTextField Label="Old Password"
                  Type="password"
                  @bind-Value="oldPassword"
                  Required="true"
                  Adornment="Adornment.Start"
                  Icon="@Icons.Material.Filled.Lock" />
    <br />
    <MudTextField Label="Confirm Old Password"
                  Type="password"
                  @bind-Value="oldPasswordConfirm"
                  Required="true"
                  Adornment="Adornment.Start"
                  Icon="@Icons.Material.Filled.Lock" />
    <br />
    <MudTextField Label="New Password"
                  Type="password"
                  @bind-Value="newPassword"
                  Required="true"
                  Adornment="Adornment.Start"
                  Icon="@Icons.Material.Filled.Lock"
                  OnInput="@( (ChangeEventArgs _) => CheckPasswordStrength() )" />

    <br />

    <!-- Password Strength Checklist -->
    <ul>
        <li>@(passwordLengthMet ? "✔️" : "❌") At least 8 characters</li>
        <li>@(hasUpperCase ? "✔️" : "❌") At least one uppercase letter</li>
        <li>@(hasLowerCase ? "✔️" : "❌") At least one lowercase letter</li>
        <li>@(hasNumber ? "✔️" : "❌") At least one number</li>
        <li>@(hasSpecialChar ? "✔️" : "❌") At least one special character</li>
    </ul>

    <MudButton OnClick="@ChangePassword" Color="Color.Primary" Variant="Variant.Filled">
        Change Password
    </MudButton>
</MudPaper>

@code {
    private string? newPassword;
    private string? oldPassword;
    private string? oldPasswordConfirm;

    // Validation flags
    private bool passwordLengthMet = false;
    private bool hasUpperCase = false;
    private bool hasLowerCase = false;
    private bool hasNumber = false;
    private bool hasSpecialChar = false;

    private bool firstRender = true;

    private async Task ChangePassword()
    {
        if (oldPassword == oldPasswordConfirm)
        {
            string hashedNewPassword = PasswordUtils.HashPassword(newPassword);
            string hashedOldPassword = PasswordUtils.HashPassword(oldPassword);
            await CustomerService.ChangePassword(UserSession.customerId, hashedOldPassword, hashedNewPassword);
            Snackbar.Add("Password changed successfully!", Severity.Success);
            NavigationManager.NavigateTo("/account-status");
        }
        else
        {
            Snackbar.Add("Old passwords do not match. Please try again.", Severity.Error);
        }
    }

    private void CheckPasswordStrength()
    {
        if (!string.IsNullOrEmpty(newPassword))
        {
            passwordLengthMet = newPassword.Length >= 8;
            hasUpperCase = newPassword.Any(char.IsUpper);
            hasLowerCase = newPassword.Any(char.IsLower);
            hasNumber = newPassword.Any(char.IsDigit);
            hasSpecialChar = newPassword.Any(ch => !char.IsLetterOrDigit(ch));
        }
        else
        {
            passwordLengthMet = hasUpperCase = hasLowerCase = hasNumber = hasSpecialChar = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var currentPageUrl = NavigationManager.Uri.Substring(22);
            await PageService.TrackPageViewAsync(currentPageUrl);
            this.firstRender = false;
        }
    }
}

