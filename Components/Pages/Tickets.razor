@using RZA_OMwebsite.Models
@using RZA_OMwebsite.Services
@using RZA_OMwebsite.Utilities
@inject AttractionService AttractionService
@inject UserSession UserSession
@inject NavigationManager NavigationManager
@inject TicketbookingService TicketbookingService
@inject TicketService TicketService

@rendermode InteractiveServer

@page "/booking/tickets"

<br />

<MudContainer>
    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom>
        Tickets
    </MudText>

    @if (attractions != null)
    {
        <MudPaper Class="p-4 mb-4">
            <MudText Typo="Typo.h6">Attractions</MudText>
            <MudGrid>
                @foreach (Attraction attraction in attractions)
                {
                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Class="mb-2">
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle1">@attraction.Name</MudText>
                                <MudText Typo="Typo.body2">Price: £@attraction.Price</MudText>
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mt-2"
                                OnClick="@(e => AddTicket(attraction.AttractionId))">
                                    Add to Basket
                                </MudButton>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
            <MudTextField Label="Select Date" InputType="InputType.Date" Variant="Variant.Outlined"
            @bind-Value="ticketDateString" Class="mt-4" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="BookTickets">
                Book Tickets
            </MudButton>
        </MudPaper>
    }
    else
    {
        <MudText Typo="Typo.body1" Color="Color.Warning">No attractions available.</MudText>
    }

    <MudPaper Class="p-4">
    <MudText Typo="Typo.h6">Your Tickets</MudText>

    @if (tickets != null && tickets.Count != 0)
    {
        <MudList Dense="true" T="int">
            @for (int i = 0; i < tickets.Count; i++)
            {
                var _index = i;
                <MudListItem>
                    <MudText Typo="Typo.body1">
                        Ticket ID: <strong>@tickets[_index].TicketId</strong>, Attraction: <strong>@tickets[_index].Attraction.Name</strong>
                    </MudText>
                    <MudButton 
                        Variant="Variant.Filled" 
                        Color="Color.Error" 
                        Size="Size.Small" 
                        OnClick="@(e => tickets.RemoveAt(_index))">
                        Delete
                    </MudButton>
                </MudListItem>
            }
        </MudList>
    }
    else
    {
        <MudText Typo="Typo.body2" Color="Color.Secondary">
            No tickets available.
        </MudText>
    }
</MudPaper>
</MudContainer>

@code {
    List<Attraction>? attractions;
    List<Ticket>? tickets;
    private DateOnly ticketDate;
    private DateTime ticketDateTime;
    string? ticketDateString;
    Ticketbooking? newTicketbooking;
    private bool isLoggedIn;
    private Severity alertSeverity;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check login status
            Task.Delay(1000);
            isLoggedIn = CheckLoginStatus();

            if (!isLoggedIn)
            {
                Console.WriteLine("User is not logged in, redirecting to login page.");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                // Fetch attractions
                attractions = await AttractionService.GetAttractionsAsync();
                tickets = new List<Ticket>();
                newTicketbooking = new Ticketbooking();
                Console.WriteLine("Attractions and tickets initialized successfully.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred during initialization: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");

            // Optional: Redirect to an error page
            NavigationManager.NavigateTo("/booking");
        }
    }

    private bool CheckLoginStatus()
    {
        return AuthService.isLoggedIn; // Check actual login status
    }

    private void AddTicket(int attractionId)
    {
        Console.WriteLine("AddTicket button was clicked");
        Console.WriteLine(ticketDate.ToString());
        Ticket newTicket = new Ticket();
        newTicket.AttractionId = attractionId;
        tickets.Add(newTicket);
    }
    private void DeleteTicket(int Index)
    {
        tickets.RemoveAt(Index);
    }

    private async Task BookTickets()
    {
        // Create a new ticket booking instance
        Ticketbooking newTicketbooking = new Ticketbooking
        {
            CustomerId = UserSession.customerId,
            DateBooked = DateOnly.FromDateTime(DateTime.Now),
            Date = DateOnly.Parse(ticketDateString)
        };

        // Save the new ticket booking
        await TicketbookingService.AddTicketbookingAsync(newTicketbooking);

        // Iterate through the tickets in the basket and save each one
        foreach (Ticket ticket in tickets)
        {
            ticket.Ticketbooking = newTicketbooking; // Associate with the booking
            await TicketService.AddTicketAsync(ticket);
        }

        // Clear the basket after booking
        tickets.Clear();
    }
}
