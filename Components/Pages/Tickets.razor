@using RZA_OMwebsite.Models
@using RZA_OMwebsite.Services
@using RZA_OMwebsite.Utilities
@inject AttractionService AttractionService
@inject UserSession UserSession
@inject NavigationManager NavigationManager
@inject TicketbookingService TicketbookingService
@inject TicketService TicketService
@inject TrackingService TrackingService
@inject IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer

@page "/booking/tickets"

<br />

<MudContainer>
    <MudText Typo=Typo.h4 Align=Align.Center GutterBottom>
        Tickets
    </MudText>

    @if (attractions != null && attractions.Count > 0)
    {
        <MudPaper Class="p-4 mb-4">
            <MudText Typo=Typo.h6>Attractions</MudText>
            <MudGrid>
                @foreach (var attraction in attractions)
                {
                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Class="mb-2">
                            <MudCardContent>
                                <MudText Typo=Typo.subtitle1>@attraction.Name</MudText>
                                <MudText Typo=Typo.body2>Price: £@attraction.Price</MudText>
                                <MudButton Variant=Variant.Filled Color=Color.Secondary Class="mt-2"
                                OnClick="() => AddTicket(attraction.AttractionId)">
                                    Add to Basket
                                </MudButton>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
            <MudTextField Label="Select Date" InputType=InputType.Date Variant=Variant.Outlined
            @bind-Value="ticketDateString" Class="mt-4" />
            <MudButton Variant=Variant.Filled Color=Color.Primary Class="mt-4" OnClick="BookTickets">
                Book Tickets
            </MudButton>
        </MudPaper>
    }
    else
    {
        <MudText Typo=Typo.body1 Color=Color.Warning>No attractions available.</MudText>
    }

    <MudPaper Class="p-4">
        <MudText Typo=Typo.h6>Your Tickets</MudText>

        @if (tickets != null && tickets.Count > 0)
        {
            @foreach (var ticket in tickets)
            {
                <MudListItem T="string">
                    <MudText Typo=Typo.body1>
                        Ticket ID: <strong>@ticket.TicketId</strong>, Attraction: <strong>@ticket.Attraction?.Name ?? "Unknown"</strong>
                    </MudText>
                    <MudButton Variant=Variant.Filled Color=Color.Error Size=Size.Small
                    OnClick="() => RemoveTicket(tickets.IndexOf(ticket))">
                        Delete
                    </MudButton>
                </MudListItem>
            }
        }
        else
        {
            <MudText Typo=Typo.body2 Color=Color.Secondary>No tickets available.</MudText>
        }

    </MudPaper>
</MudContainer>

@code {
    private List<Attraction> attractions = new();
    private List<Ticket> tickets = new();
    private string? ticketDateString;
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        await TrackingService.LogActionAsync("Visited Tickets Page", HttpContextAccessor.HttpContext);

        try
        {
            isLoggedIn = CheckLoginStatus();

            if (!isLoggedIn)
            {
                Console.WriteLine("User is not logged in, redirecting to login page.");
                NavigationManager.NavigateTo("/login");
                return;
            }

            attractions = await AttractionService.GetAttractionsAsync() ?? new();
            Console.WriteLine("Attractions loaded successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
        }
    }

    private void AddTicket(int attractionId)
    {
        if (string.IsNullOrEmpty(ticketDateString))
        {
            Console.WriteLine("Please select a valid date before adding tickets.");
            return;
        }

        tickets.Add(new Ticket
            {
                AttractionId = attractionId
            });
        Console.WriteLine($"Ticket for attraction {attractionId} added.");
    }

    private void RemoveTicket(int index)
    {
        if (index >= 0 && index < tickets.Count)
        {
            tickets.RemoveAt(index);
            Console.WriteLine($"Removed ticket at index {index}.");
            StateHasChanged(); // Forces the UI to refresh
        }
    }


    private bool CheckLoginStatus()
    {
        return AuthService.isLoggedIn;
    }

    private async Task BookTickets()
    {
        if (tickets.Count == 0)
        {
            Console.WriteLine("No tickets to book.");
            return;
        }

        if (string.IsNullOrEmpty(ticketDateString))
        {
            Console.WriteLine("Please select a valid booking date.");
            return;
        }

        try
        {
            DateOnly bookingDate = DateOnly.Parse(ticketDateString);
            var newTicketbooking = new Ticketbooking
                {
                    CustomerId = UserSession.customerId,
                    Date = bookingDate,
                    DateBooked = DateOnly.FromDateTime(DateTime.Now)
                };

            await TicketbookingService.AddTicketbookingAsync(newTicketbooking);

            foreach (var ticket in tickets)
            {
                ticket.Ticketbooking = newTicketbooking;
                await TicketService.AddTicketAsync(ticket);
            }

            tickets.Clear();
            Console.WriteLine("Tickets booked successfully.");
            NavigationManager.NavigateTo("/payment");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error booking tickets: {ex.Message}");
        }
    }
}
