@page "/register"
@using RZA_OMwebsite.Services
@using RZA_OMwebsite.Utilities
@using RZA_OMwebsite.Models
@using RZA_OMwebsite.Pages
@inject UserService UserService
@inject PageService PageService
@inject NavigationManager NavigationManager

<div style="background-color: #1a3d0b; padding: 20px; min-height: 100vh; display: flex; justify-content: center; align-items: center;">
    <!-- Wrapper div with dark green background and full page coverage -->
    <MudPaper Class="pa-4" MaxWidth="400px" Elevation="2" Style="background-color: #286506;">
        <MudText Style="color: #fff;" Typo="Typo.h4" Align="Align.Center">Register</MudText>

        <br />

        <MudForm>
            <MudTextField Style="color: #fff;" Label="Username" @bind-Value="newCustomer.Username" Required="true" Class="mb-3" @onkeydown="HandleKeyDown" />
            <MudTextField Style="color: #fff;" Label="Password" @bind-Value="newCustomer.Password" InputType="InputType.Password" Required="true" Class="mb-3" @onkeydown="HandleKeyDown" />
            <MudTextField Style="color: #fff;" Label="First Name" @bind-Value="newCustomer.FirstName" Required="true" Class="mb-3" @onkeydown="HandleKeyDown" />
            <MudTextField Style="color: #fff;" Label="Last Name" @bind-Value="newCustomer.LastName" Required="true" Class="mb-3" @onkeydown="HandleKeyDown" />
            <MudTextField Style="color: #fff;" Label="Email" @bind-Value="newCustomer.Email" InputType="InputType.Email" Required="true" Class="mb-3" @onkeydown="HandleKeyDown" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RegisterCustomer" Class="mt-3" FullWidth="true">Register</MudButton>
        </MudForm>

        @if (!string.IsNullOrEmpty(message))
        {
            <MudAlert Severity="alertSeverity" Variant="Variant.Outlined" Square="true" Class="my-2">@message</MudAlert>
        }
    </MudPaper>
</div>

@code {
    private bool first = true;
    private Customer newCustomer = new Customer();
    private string message = string.Empty; // Initialize with an empty string
    private Severity alertSeverity;
    private bool isLoggedIn;


    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(20);
        isLoggedIn = CheckLoginStatus();

        if (isLoggedIn)
        {
            NavigationManager.NavigateTo("/main");
        }
    }

    private bool CheckLoginStatus()
    {
        // Simulate login status; replace this with your actual logic
        return AuthService.isLoggedIn; // Simulating that the user is logged in for this example
    }

    private async Task RegisterCustomer()
    {
        // Validate all required fields
        if (string.IsNullOrWhiteSpace(newCustomer.Username) ||
            string.IsNullOrWhiteSpace(newCustomer.Password) ||
            string.IsNullOrWhiteSpace(newCustomer.FirstName) ||
            string.IsNullOrWhiteSpace(newCustomer.LastName) ||
            string.IsNullOrWhiteSpace(newCustomer.Email))
        {
            message = "All fields are required. Please fill in all the details.";
            alertSeverity = Severity.Warning;
            return;
        }

        // Hash the password before saving
        var hashedPassword = PasswordUtils.HashPassword(newCustomer.Password);
        newCustomer.Password = hashedPassword; // Store the hashed password

        bool isAdded = await UserService.AddCustomerAsync(newCustomer);

        if (isAdded)
        {
            message = "Registration successful!";
            alertSeverity = Severity.Success;
            newCustomer = new Customer();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            message = "Username already exists. Please choose another.";
            alertSeverity = Severity.Error;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get the current page URL (this can be adjusted depending on how you're tracking page URL)
            var currentPageUrl = NavigationManager.Uri.Substring(22);

            // Call the method to track the page view
            await PageService.TrackPageViewAsync(currentPageUrl);
            first = false;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await RegisterCustomer();
        }
    }
}
